import pandas as pd
import argparse
import matplotlib.pyplot as plt

class BudgetManager:
    """
    Class that tracks your finances, provides analytics based on monthly spending
    and spending based on location, and gives suggestions on spending habits.
    """
    def __init__(self, filename, delimiter=','):
        self.filename = filename
        self.data = pd.read_csv(filename, delimiter=delimiter)

    def parse_currency(self, value):
        if isinstance(value, str):
            return float(value.replace('$', '').replace(',', ''))
        return value

    def total_expenses(self):
        expenses_by_category = {}
        for _, row in self.data.iterrows():
            category = row['category']
            spending = self.parse_currency(row['spending'])
            if category not in expenses_by_category:
                expenses_by_category[category] = 0
            expenses_by_category[category] += spending
        return expenses_by_category

    def get_expense_by_category(self, category):
        """
        Gets the total expenses for a specific category. Then it Returns zero if the category does not exist.

        Parameters:
            category (str): Name of the category where expenses will be collected.

        Returns:
            float: Total expenses for the category, or zero if the category does not exist.
        """
        if category in self.categories:
            return self.categories[category]
        else:
            return 0
    def remove_category(self, category):
        """
        Removes category from the budget and its expenses.

        Parameters:
            category (str): name of removed category
        """
        if category in self.categories:
            del self.categories[category]

def main(self, filepath):
    """Data Aggregation function that will read the path to a file and do aggregation methods

    Args:
        filepath (str): path to a csv file
    """
    budget_manager = BudgetManager()
    with open(filepath, newline='') as csvfile:
        csvpath = csv.reader(csvfile)
        for row in csvpath:
            if 'Category' in row and 'Amount' in row: 
                budget_manager.add_expense(row['Category'], float(row['Amount']))

    budget_manager.total_expense()

    
def parse_args(argslist):
    """Parse command line arguments

    Args:
        argslist (list): list of command line args

    Returns:
        namespace object
    """

    parser = ArgumentParser()
    parser.add_argument("filepath",help="path to a CSV file")
    return parser.parse_args(argslist)

if __name__ == "__main__":
    args = parse_args(sys.argv[1:])
    main(args.filepath)
